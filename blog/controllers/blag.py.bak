from pylons import request
from pylons.controllers.util import redirect
from blog.lib.base import BaseController, render

import uuid
from datetime import datetime
import PyRSS2Gen

from authkit.authorize.pylons_adaptors import authorize
from authkit.permissions import RemoteUser, ValidAuthKitUser, UserIn

from blog.model.models import Category, Post

class BlagController(BaseController):
    def feed(self):
        cnt = 0
        items = []
        for i in Category(name='all').load().resolve():
            if cnt > 9:
                break
            items.append(
                PyRSS2Gen.RSSItem(
                    title = i.get('title'),
                    link = i.url(),
                    description = i.txt(),
                    guid = PyRSS2Gen.Guid(i.url()),
                    pubDate = i.date()
                )
            )

        
        rss = PyRSS2Gen.RSS2(
            title = "Almir Karic Blog",
            link = "http://almirkaric.com/feed/",
            description = "Hacking, each day, every day :)",
            lastBuildDate = datetime.now(),

            items = items
            )

        return render("/feed.html", {'feed': rss.to_xml()})
    def page(self, name):
        return render("/pages/%s.html" % name, {'page': True })

    def index(self):
        return self.history(0)

    @authorize(RemoteUser())
    def edit(self, slug=None):
        post = None
        title = request.params.get('title')
        text = request.params.get('text')
        if not slug:
            slug = request.params.get('slug')
        if slug and title and text:
            post = Post(slug=slug, title=title, text=text).save()
            c = Category(name='all').load()
            if post.get('slug') not in [i.get('slug') for i in c]:
                c.append(post)
                c.save()
            return redirect('/edit/%s/' % slug)
        elif slug:
            post = Post(slug=slug).load()
        return render("/blog/edit.html", {
            'post': post,
        })

    def post(self, slug, *args):
        return render("/blog/post.html", {
            'post': Post(slug=slug).load(),
        })

    def history(self, num):
        num = int(num)
        # FIXME: REALLY dumb pagination
        posts = list(Category(name='all').load().resolve())
        SIZE = 10
        return render("/blog/history.html", {
            'posts': posts[num*SIZE:(num+1)*SIZE],
            'num': num,
            })



